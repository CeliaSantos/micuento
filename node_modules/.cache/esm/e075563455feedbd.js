let getAll,create,update,deletion;_55f‍.x([["getTasks",()=>getTasks],["createTask",()=>createTask],["updateTask",()=>updateTask],["deleteTask",()=>deleteTask]]);_55f‍.w("../datalayer/dao/taskDAO",[["getAll",["getAll"],function(v){getAll=v}],["create",["create"],function(v){create=v}],["update",["update"],function(v){update=v}],["deletion",["deletion"],function(v){deletion=v}]]);



/** get tasks **/
       const getTasks = (req, res) => {
    setHeaders(res);
    let sort = null;
    if (req.query.hasOwnProperty('sort')) sort = req.query.sort;
    _55f‍.a("getAll",getAll)( sort, function ( data ) {
        if(data.length === 0) return res.status(200).send([]);
        else return res.status(200).send(JSON.stringify(data));
    });
};;_55f‍.j(["getTasks"]);

/** Create new task **/
       const createTask = (req, res) => {
    setHeaders(res);
    if (isValidParams(req.body)){
        _55f‍.a("create",create)( req.body, function ( data ) {
            if(data.length === 0) return res.status(200).send([]);
            else return res.status(200).send(JSON.stringify(data));
        });
    } else {
        return res.status(400).send("No valid body.");
    }
};;_55f‍.j(["createTask"]);

/** Update task **/
       const updateTask = (req, res) => {
    setHeaders(res);
    if (isValidId(req.params.id)){
        _55f‍.a("update",update)( req.params.id, req.body, function ( data ) {
            if(data.length === 0) return res.status(404).send("No task with id: " + req.params.id.toString());
            else return res.status(200).send(JSON.stringify(data));
        });
    } else {
        return res.status(400).send("No valid body.");
    }
};_55f‍.j(["updateTask"]);


/** Delete task by @id **/
       const deleteTask = (req, res) => {
    setHeaders(res);
    if (isValidId(req.params.id)){
        _55f‍.a("deletion",deletion)( req.params.id, function ( data ) {
            if(data.length === 0) return res.status(404).send("No task with id: " + req.params.id.toString());
            else return res.status(200).send(JSON.stringify(data));
        });
    } else {
        return res.status(400).send("No valid id.");
    }
};_55f‍.j(["deleteTask"]);

const setHeaders = (res) => {
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
    return res
}

const isValidParams = (body) => {
    if ( !body.hasOwnProperty('name') || body.name.length <= 1 ) return false;
    if ( !body.hasOwnProperty('dueDate') || !body.dueDate instanceof Date) return false;
    if ( !body.hasOwnProperty('priority') || (body.priority < 1 || body.priority > 5) ) return false;
    return true;
};

const isValidId = (paramId) => {
    if (!isNaN(paramId)) return true;
    else return false;
};