let connection,mapEntities,mapTaskEntityToModel,TaskEntity,TaskEntityCreate;_062‍.x([["getAll",()=>getAll],["create",()=>create],["update",()=>update],["deletion",()=>deletion]]);_062‍.w("../../app",[["connection",["connection"],function(v){connection=v}]]);_062‍.w("../../model/task",[["mapEntities",["mapEntities"],function(v){mapEntities=v}],["mapTaskEntityToModel",["mapTaskEntityToModel"],function(v){mapTaskEntityToModel=v}]]);_062‍.w("../entity/taskEntity",[["TaskEntity",["TaskEntity"],function(v){TaskEntity=v}],["TaskEntityCreate",["TaskEntityCreate"],function(v){TaskEntityCreate=v}]]);








       const getAll = (sort, callback) => {
    let query = '';
    if (sort == null){
        query = `SELECT * FROM task.task`;
    } else {
        query = `SELECT * FROM task.task ORDER BY ${sort}`;
    }
    _062‍.a("connection",connection).query(query, (err, rows) => {
        if(err) throw err;
        else {
            callback(_062‍.a("mapEntities",mapEntities)(rows));
        }

    });
};;_062‍.j(["getAll"]);

const getById = (id, callback) => {
    _062‍.a("connection",connection).query(`SELECT * FROM task.task WHERE id = '${id}'`, (err, row) => {
        if(err) throw err;
        else {
            if (row.length == 0) callback(null);
            else callback(row[0]);
        }
    });
}

       const create = (task, callback) => {
    const taskEntity = new (_062‍.a("TaskEntityCreate",TaskEntityCreate))(task.name, task.dueDate, task.priority);
    _062‍.a("connection",connection).query(`INSERT INTO task.task SET ?`, taskEntity, (err, row) => {
        if(err) throw err;
        else {
            taskEntity.id = row.insertId;
            callback(_062‍.a("mapTaskEntityToModel",mapTaskEntityToModel)(taskEntity));
        }
    });
};;_062‍.j(["create"]);

       const update = (taskId, task, callback) => {
    getById(taskId, function (foundRow) {
        if (foundRow == null ) {
            callback([]);
            return;
        }
        foundRow.name = task.name;
        foundRow.due_date = task.dueDate;
        foundRow.priority = task.priority;
        foundRow.updated_at = new Date().toISOString().slice(0, 19).replace('T', ' ');
        _062‍.a("connection",connection).query(`UPDATE task.task SET ? WHERE id = '${taskId}'`, foundRow, (err, row) => {
            if(err) throw err;
            else {
                callback(_062‍.a("mapTaskEntityToModel",mapTaskEntityToModel)(foundRow));
            }
        });
    });
};;_062‍.j(["update"]);

       const deletion = (taskId, callback) => {
    getById(taskId, function (foundRow) {
        if (foundRow == null ) {
            callback([]);
            return;
        }
        _062‍.a("connection",connection).query(`DELETE FROM task.task WHERE id = '${taskId}'`, foundRow, (err, row) => {
            if(err) throw err;
            else {
                callback(_062‍.a("mapTaskEntityToModel",mapTaskEntityToModel)(foundRow));
            }
        });
    });
};;_062‍.j(["deletion"]);